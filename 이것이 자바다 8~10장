인터페이스
8.1 인터페이스의 역할
 - 인터페이스(interface)는 객체의 사용방법을 정의한 타입이다. 
   인터페이스는 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다. 또한 개발 코드와 객체가 서로 통신하는 접점 역할을 한다. 
   개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다. 그래서 개발 코드는 객체의 내부 구조를 알 필요 없이 인터페이스의 메소드만 알면 된다.
- 개발 코드로 메소드를 호출하지 않고 굳이 인터페이스를 쓰는 이유는 개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 하기 위해서이다.
- 인터페이서는 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라 실행 내용과 리턴값이 다를 수 있다. 
  따라서 개발 코드 측면에선 코드 변경 없이 실행 내용과 리턴값을 다양화할 수 있다는 장점을 가지게 된다.
8.2 인터페이스 선언
- 인터페이스는 ".java" 형태의 소스 파일로 작성되고 컴파일러를 통해 ".class" 형식으로 컴파일 되기 때문에 물리적 형태는 클래스와 동일하다. 
  차이점은 소스를 작성할 때 선언하는 방법이 다르다.
- class 키워드 대신 interface 키워드를 사용한다. 이름 작성법은 클래스와 동일하다.
[public] interface 인터페이스명{...}
- 클래스는 필드, 생성자, 메소드를 구성멤버로 가지나, 인터페이스는 상수와 메소드만을 구성멤버로 가진다. 인터페이스는 객체 생성이 불가하므로 생성자를 가질 수 없기 때문이다.
interface 인터페이스명{
    //상수
    타입 상수명 = 값;
    //추상 메소드
    타입 메소드명 (매개변수, ..);
    //디폴트 메소드
    default 타입 메소드명(매개변수, ..);
    //정적 메소드
    static 타입 메소드명(매개변수){..};
}
8.2.1 상수 필드 선언
- 인터페이스는 데이터를 저장할 수 없으므로 데이터를 저장할 인스턴스 또는 정적 필드를 선언할 수 없다. 대신 상수 필드만 선언할 수 있다.
- 인터페이스에서 선언된 필드는 모두 public static final의 특성을 갖는다. 이를 생략해도 컴파일 과정에서 자동적으로 붙게 된다. 상수명은 모두 대문자나 언더바로 작성한다.
- 인터페이스 상수는 static { }블록으로 초기화가 불가하므로 선언과 동시에 초기값을 지정해야 한다.
public interface sample{
    public int MAX = 10;
}
8.2.2 추상 메소드 선언
- 인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행되므로, 실행 블록이 필요 없는 추상 메소드로 선언한다. 
  추상 메소드는 리턴 타입, 메소드명, 매개 변수만 기술되고 중괄호{}를 붙이지 않는 메소드를 말한다. 
  이는 모두 public abstract의 특성을 가지므로 컴파일시 자동적으로 붙게 된다.
8.2.3 디폴트 메소드 선언
- 자바 8에서 추가된 인터페이스의 새로운 멤버이다. default 키워드가 리턴 타입 앞에 붙는다. 
  디폴트 메소드는 public 특성을 가지므로 public을 생략하더라도 자동적으로 붙게 된다.
- 디폴트 메소드 선언시 실행내용까지 모두 작성해야 한다.
[public] default 리턴타입 메소드명(매개변수, ...){...}
8.2.4 정적 메소드 선언
- 디폴트 메소드와 마찬가지로 자바8에서 추가된 인터페이스의 멤버이다. 형태는 정적 메소드와 동일하며, public 특성을 가진다.
[public] static 리턴타입 메소드명(매개변수, ..){..}
8.3 인터페이스 구현
- 개발 코드가 인터페이스 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다. 
  객체는 인터페이스에서 정의된 추상 메소드와 동일한 메소드 이름, 매개타입, 리턴타입을 가진 실체 메소드를 가지고 있어야 한다.
  이러한 객체를 인터페이스의 구현(implement) 객체라고 하고, 구현 객체를 생성하는 클래스를 구현 클래스라고 한다.
8.3.1 구현 클래스
- 구현 클래스는 인터페이스 타입으로 사용할 수 있음을 알려주기 위해 클래스 선언부에 implements 키워드를 추가하고 인터페이스명을 명시한다.
public class 구현클래스명 implements 인터페이스명 {
  	   //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}
- 그리고 인터페이스에 선언된 추상 메소드의 실체 메소드를 선언해야 한다. 
  이 때 주의할 점은 인터페이스의 모든 메소드는 기본적으로 public 접근 제한을 가지므로 이보다 더 낮은 접근 제한으로 작성할 수 없다. 
  public 생략 시 "Cannot reduce the visibility of the inherited method(상속된 메소드의 가시성을 줄일 수 없다)" 컴파일 에러가 발생한다.
- 추상 메소드에 대응하는 실체 메소드를 작성하지 않으면 해당 클래스는 자동으로 추상 클래스가 되며, 이 때는 클래스 선언부에 abstrac 키워드를 추가해야 한다.
public abstract calss Tv implements Rc{
    	 public void turnOn(){...}
    	 //public void turnOff(){..} -> 실체 메소드 작성하지 않음.
}
- 구현 클래스의 실체 메소드에 @Override 어노테이션을 붙이면 컴파일러가 실체 메소드인지를 체크한다.
- 구현 클래스가 작성되면 new 연산자로 객체를 생성하여 인터페이스에 대입할 수 있다. 인터페이스 변수는 참조 타입이므로 구현객체의 번지를 저장한다.
인터페이스 변수;
변수 = new 구현객체; //인터페이스 변수 = new 구현객체;
8.3.2 익명 구현 객체
- 구현 클래스를 만들어 사용하는 것은 일반적이고 클래스를 재사용할 수 있기 때문이 편리하지만 
  일회성의 구현 객체를 만들기 위해 소스파일을 만들고 클래스를 선언하는 것은 비효율적이다.
  이에 소스파일을 만들지 않고도 구현객체를 만들 수 있는 방법을 제공하는데, 이것이 익명구현 객체이다.
- ui프로그래밍 이벤트 처리, 임시 작업 스레드를 만들 때 많이 활용된다.
인터페이스 변수 = new 인터페이스(){
  	   //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}; //반점 있음!
- 중괄호에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다. 그렇지 않으면 컴파일 에러가 발생한다.
- 추가적으로 필드와 메소드 선언이 가능하나, 익명 객체 안에서만 사용할 수 있고 인터페이스 변수로 접근할 수 없다.
- 모든 객체는 클래스로부터 생성된다. 익명 구현 객체의 소스코드를 컴파일하면 컴파일러에 의해 "클래스명$1.class"의 이름으로 파일이 생성된다.
8.3.3 다중 인터페이스 구현 클래스
- 객체는 다수의 인터페이스 타입으로 사용할 수 있다.
public class 구현클래스명 implements 인터페이스A, 인터페이스B {
    	 //인터페이스A에 선언된 추상 메소드의 실체 메소드 선언
   	  //인터페이스B에 선언된 추상 메소드의 실체 메소드 선언
}
- 다중 인터페이스를 구현할 경우, 구현 클래스는 모든 인터페이스의 추상 메소드에 대해 실체 메소드를 작성해야한다. 하나라도 없으면 추상 클래스로 선언해야 한다.
8.4 인터페이스 사용
- 인터페이스로 구현 객체를 사용하려면 인터페이스 변수를 선언하고 구현 객체를 대입해야 한다. 
  인터페이스 변수는 참조 타입이므로 구현 객체가 대입될 경우 구현 객체의 번지를 저장한다.
- 개발 코드에서 인터페이스는 클래스의 필드, 생성자 또는 메소드의 매개변수, 생성자 또는 메소드의 로컬 변수로 선언될 수 있다.
8.4.1 추상 메소드 사용
- 구현 객체가 인터페이스 타입에 대입되면 인터페이스에 선언된 추상 메소드를 개발 코드에서 변수를 통해 호출할 수 있게 된다.
RC rc = new Tv();
rc.turnOn();//Tv의 실체 메소드 실행
8.4.2 디폴트 메소드 사용
- 디폴트 메소드는 인터페이스에 선언되나, 인터페이스에서 바로 사용할 수 없다. 
  디폴트 메소드는 추상 메소드가 아닌 인스턴스 메소드이므로 구현 객체가 있어야 사용이 가능하다.
RC rc = new tv();
 	rc.turnOff();
- 디폴트 메소드는 인터페이스의 모든 구현 객체가 가지고 있는 기본 메소드라고 생각할 수 있다.
- 어떤 객체의 디폴트 메소드 내용의 수정이 필요할 때는, 이를 재정의(오버라이딩)하면 된다. 그러면 디폴트 메소드를 호출할 때 재정의한 메소드가 호출된다.
8.4.3 정적 메소드 사용
- 인터페이스의 정적 메소드는 인터페이스로 바로 호출이 가능하다.
public class ex {
    	 public static void main(String[]args){
    	     RC.go();//인터페이스로 바로 호출
   	  }
}
8.5 타입 변환과 다형성
- 요즘은 상속보다도 인터페이스를 통해 다형성을 구현한다. 
  상속에서 부모 타입에 어떤 자식 객체를 대입하느냐에 따라 실행 결과가 달라지는 것처럼, 인터페이스 타입에 어떤 구현 객체를 대입하느냐에 따라 실행 결과가 달라진다.
- 상속은 같은 종류의 하위 클래스를 만드는 기술이고, 인터페이스는 사용 방법이 동일한 클래스를 만드는 기술이다.
- 프로그램 소스 코드는 변함이 없는데, 구현 객체를 교체함으로써 프로그램의 실행 결과가 다양해지는 것을 인터페이스의 다형성이라고 부른다.
- 클래스에 문제가 있어 다른 클래스를 만들 때는 같은 메소드를 사용한다면 메소드 선언부가 동일해야 한다. 
  인터페이스를 추상 메소드를 작성하고 구현 클래스로 해당 메소드를 작성할 시에 이러한 문제를 해결할 수 있다. 처음부터 메소드 선언부가 동일하기 때문이다.
- 인터페이스는 메소드의 매개 변수로 많이 등장하는데, 해당 매개 값으로 여러 종류의 구현 객체를 줄 수 있으므로 메소드 실행 결과가 다양하게 나온다.
  이것이 인터페이스 매개 변수의 다형성이다.
8.5.1 자동 타입 변환
- 구현 객체가 인터페이스 타입으로 변환되는 것은 자동 타입 변환(promotion)에 해당한다. 자동 타입 변환은 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것을 말한다.
인터페이스 변수 = 구현객체;//구현객체가 자동 타입 변환됨
- 구현 클래스를 상속하여 자식 클래스를 만들었다면 자식 객체 역시 인터페이스 타입으로 자동 타입 변환시킬 수 있다. 
  이를 통해 필드의 다형성과 매개 변수의 다형성을 구현할 수 있다.
8.5.2 필드의 다형성
- 같은 인터페이스의 구현 객체는 교체될 수 있다. 따라서 개발 코드의 수정 없이도 다양한 결과(개발 코드에서의 인터페이스 메소드 실행 등)를 얻을 수 있다.
8.5.3 인터페이스 배열로 구현 객체 관리
인터페이스 배열을 통해 여러 구현 객체들을 인덱스로 표현하여 관리할 수 있다. 이렇게 하면 제어문에서 가장 큰 이점이 있다.
Tire[] tires ={
  	   new HTire();
    new HTire();
    new HTire();
    new HTire();
}
void run(){
   	  for(Tire tire : tires){
  	       tire.roll();
   	  }
}
8.5.4 매개 변수의 다형성
- 자동 타입 변환은 주로 메소드를 호출할 때 많이 발생한다. 매개 변수를 인터페이스 타입으로 선언하고 호출 시 구현 객체를 대입한다.
//Driver 클래스
public class Driver{
    public void drice(Vehicle vehicle){
        vehicle.run();
    }
}
//Vehicle 인터페이스 타입
public interface Vehicle{
    public void run();
}
//구현 객체 Bus
public class Bus implements Vehicle{
    @Override
    public void run(){
        System.out.println("버스가 달립니다");
    }
}
//매개 변수의 다형성 테스트
public class DriverEx{
    public static void main(String[] args){
        Driver driver = new Driver()
            
        Bus bus = new Bus();
        
        driver.drive(bus);//bus ->자동 타입 변환됨
    }
}
- 인터페이스가 매개변수 타입으로 제공될 경우, 어떠한 구현 객체도 매개값으로 사용할 수 있고, 이를 통해 메소드의 실행결과가 다양해질 수 있게 된다.(매개 변수의 다형성)
8.5.5 강제 타입 변환
- 구현 객체가 인터페이스 타입으로 자동 변화하면, 인터페이스에 선언된 메소드만 사용이 가능하다. 
  그러나 경우에 따라 구현 클래스에 선언된 필드와 메소드를 사용해야 할 수 있는데, 이 때 강제 타입 변환을 사용하여 구현 클래스의 필드와 메소드를 사용할 수 있다.
구현 클래스 변수 = (구현 클래스) 인터페이스 변수;//강제 타입 변환
8.5.6 객체 타입 확인
- 강제 타입변환은 구현 객체가 인터페이스 타입으로 변환되어 있는 상태에서 가능하다. 
  이 때 상속에서 객체 타입 확인을 한 것처럼, 인터페이스 타입도 객체의 타입 확인이 필요하다. 
  어떤 구현 객체가 변환되어 있는지 알지 못하고 변환할 경우 ClassCastException이 발생할 수 있기 때문이다.
- 객체 타입 확인을 위하여 instanceof 연산자를 사용할 수 있다.
if(vehicle instanceof Bus){
  	   Bus bus = (Bus) vehicle; //안심하고 변환 가능
}
8.6 인터페이스 상속
- 인터페이스도 다른 인터페이스를 상속할 수 있다. 인터페이스는 클래스와 달리 다중 상속을 허용한다.
public interface 하위인터페이스 extends 상위인터페이스1, 하위인터페이스2 {...}
- 하위 인터페이스의 구현 클래스는 하위, 상위 인터페이스의 모든 추상 메소드에 대한 실체 메소드를 가지고 있어야 한다. 
  따라서 해당 구현 클래스로부터 객체를 생성하고 나서 하위 및 상위 인터페이스 타입으로 변환이 가능하다.
하위인터페이스 변수 = new 구현클래스(...);
상위인터페이스1 변수 = new 구현클래스(...);
상위인터페이스2 변수 = new 구현클래스(...);
- 하위 인터페이스로 타입 변환이 되면 상하위 인터페이스에 선언된 모든 메소드를 사용할 수 있으나, 
  상위 인터페이스로 타입 변환시 하위 인터페이스에 선언된 메소드는 사용이 불가하다.
8.7 디폴트 메소드와 인터페이스 확장
- 디폴트 메소드는 인터페이스에서 선언된 인스턴스 메소드이므로 구현 객체가 있어야 사용가능하다. 왜 선언은 인터페이스에서 하고, 사용은 구현 객체를 통해 하는 것일까?
8.7.1 디폴트 메소드의 필요성
- 인터페이스에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다. 
  기존 인터페이스의 이름과 추상 메소드의 변경 없이 디폴트 메소드만 추가할 수 있기 때문에 
  이전에 개발한 구현 클래스를 그대로 사용할 수 있으면서 새롭게 개발하는 클래스는 디폴트 메소드를 활용할 수 있다.
- 추상 클래스는 구현 클래스에서 실행 내용을 채워야 하지만, 디폴트 메소드는 인터페이스에 정의된 것을 그냥 사용해도 되고, 필요에 따라 재정의해서 사용할 수도 있다.
8.7.2 디폴트 메소드가 있는 인터페이스 상속
- 부모 인터페이스에 디폴트 메소드가 정의되어 있을 경우, 자식 인터페이스에서 디폴트 메소드를 활용하는 방법은 다음 세 가지가 있다.
1. 디폴트 메소드를 단순히 상속만 받는다.
//부모 인터페이스
public interface ParentInterface{
    public void method1();
    public default void method2(){/*실행문*/}
}
//자식 인터페이스1
public interface ChildInterface1 extends ParentInterface {
    public void method3;
}
//자식 인터페이스1을 구현하는 클래스는 method1()과 method3()의 실체 메소드를 가지고 있어야 하며 method2()를 호출할 수 있다.
ChildInterface1 ci1 = new ChildInterface1(){ //익명 구현 객체
    @Override
    public void method1() {/*실행문*/}
    @Override
    public void method3() {/*실행문*/}
};

ci1.method1();
ci1.method2();//ParentInterface의 method2() 호출
2. 디폴트 메소드를 재정의(Override)해서 실행 내용을 변경한다.
//자식 인터페이스2
public interface ChildInterface2 extends ParentInterface {
    @Override
    public default void method2() {/*실행문*/} //재정의
    public void method3();
}
//자식 인터페이스1 구현 클래스와 유사함.
ChildInterface2 ci2 = new ChildInterface2(){ //익명 구현 객체
    @Override
    public void method1() {/*실행문*/}
    @Override
    public void method3() {/*실행문*/}
};
ci2.method1();
ci2.method2();//ParentInterface의 method2() 호출
3. 디폴트 메소드를 추상 메소드로 재선언한다.
//자식 인터페이스3
public interface ChildInterface3 extends ParentInterface {
    @Override
    public void method2() //추상 메소드로 재선언
    public void method3();
}
//자식 인터페이스3을 구현하는 클래스는 method1(), method2(), method3()의 실체 메소드를 모두 가지고 있어야 한다.
ChildInterface2 ci3 = new ChildInterface3(){ //익명 구현 객체
    @Override
    public void method1() {/*실행문*/}
    @Override
    public void method2() {/*실행문*/}
    @Override
    public void method3() {/*실행문*/}
};
ci3.method1();
ci3.method2();//ChildInterface3 구현 객체의 method2() 호출
중첩 클래스와 중첩 인터페이스
9.1 중첩 클래스와 중첩 인터페이스란?
- 중첩 클래스(Nested Class)란 클래스 내부에 선언한 클래스를 말하는데, 중첩 클래스를 사용하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있고, 
  외부에는 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.
- 여러 클래스와 관계를 맺는 경우에는 독립적으로 선언하나, 특정 클래스와 관계를 맺을 경우 중첩 클래스를 사용할 수 있다.
//중첩 클래스 예시
class ClassName{
  	   class NestedClassName{       
  	   }
}
- 인터페이스도 클래스 내부에 선언할 수 있다. 이런 인터페이스를 중첩 인터페이스라고 한다.
- 중첩 인터페이스를 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다.
- 중첩 인터페이스는 주로 UI 프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.
//중첩 인터페이스 예시
class ClassName{
    interface NestedInterfaceName{
  	   }
 	}
9.2 중첩 클래스
- 중첩 클래스는 클래스 내부에 선언되는 위치에 따라서 두 가지로 분류된다. 
  클래스의 멤버로 선언되는 중첩 클래스를 멤버 클래스라고 하고, 메소드 내부에서 선언되는 중첩 클래스를 로컬 클래스라고 한다. 
  멤버 클래스는 클래스나 객체가 사용 중이라면 언제든지 재사용이 가능하지만, 로컬 클래스는 메소드 실행 시에만 사용되고, 메소드가 실행 종료되면 없어진다.

멤버 클래스
- 인스턴스 멤버 클래스
class A {
    class B{...}
}				
- static 키워드 없이 선언된 클래스이며, 인스턴트 필드와 메소드 선언이 가능하고 정적 필드와 메소드는 선언이 불가하다.
- A클래스의 외부에서 B의 객체를 사용하려면 A 객체를 먼저 생성해야 B 객체를 생성할 수 있다.
A a = new A();
A.B b = a.new B(); //사용 가능
- 정적 멤버 클래스
class A{
    	 static class C{...}
}//A 클래스로 바로 접근할 수 있는 C중첩 클래스
- static 키워드로 선언된 클래스이며, 모든 종류의 필드와 메소드를 선언할 수 있다.
- A 클래스의 외부에서 정적 멤버 클래스 C의 객체를 생성하기 위해서는 A객체를 생성할 필요없이 C 객체를 다음과 같이 생성하면 된다.
A.C c = new A.C(); //사용 가능
- 로컬 클래스
class A{
    void method(){
    	     class B{...}
   	  }
} //method()가 실행될 때만 사용할 수 있는 B중첩
- 클래스의 메소드 내에 선언한 중첩 클래스를 로컬 클래스라고 한다.
- 로컬 클래스는 메소드 내부에서만 사용되므로 접근을 제한할 필요가 없어 접근제한자 및 static을 붙일 수 없다.
- 로컬 클래스 내부에는 인스턴스 핀드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
- 로컬 클래스는 메소드가 실행될 때 메소드 내에서 객체를 생성하고 사용해야 한다.
A a = new A();
a.method() // 로컬 클래스 객체 생성을 위한 메소드 호출 
- 컴파일 시 멤버 클래스와 로컬 클래스는 별도로 바이트 코드 파일이 생성되며, 멤버 클래스는 "바깥클래스$멤버클래스.class"로, 
  로컬 클래스는 "바깥클래스$1로컬클래스.class" 형식으로 생성된다.
9.3 중첩 클래스의 접근 제한
9.3.1 바깥 필드와 메소드에서 사용 제한
- 멤버 클래스가 인스턴스 또는 정적으로 선언됨에 따라 바깥 클래스의 필드와 메소드에 사용제한이 생긴다.
- 인스턴스 멤버 클래스는 정적 필드나 메소드에서 객체를 생성할 수 없으나, 정적 멤버 클래스는 가능하다.
public class A{
    //인스턴스 필드
    B field1 = new B();
    C field2 = new C();
    //인스턴스 메소드
    void method1(){
        B var1 = new B();
        C var2 = new C();
    }
    //정적 필드 초기화
    //static B field3 = new B(); 인스턴스 멤버 클래스는 안됨
    static C field3 = new C()
    //정적 메소드
    static void method2(){
        //B var1 = new B(); 안됨
        C var2 = new C();
    }
    //인스턴스 멤버 클래스
    class B{}
    //정적 멤버 클래스
    static class C{}
}
9.3.2 멤버 클래스에서 사용 제한
- 멤버 클래스 내부에서 바깥 클래스의 필드와 메소드를 접근할 때도 제한이 있다.
- 인스턴스 멤버 클래스는 바깥 클래스의 모든 필드와 메소드에 접근할 수 있지만, 
  정적 멤버 클래스는 바깥 클래스의 정적 필드와 메소드에만 접근할 수 있고 인스턴스 필드와 메소드는 접근할 수 없다.
public class A{
    //인스턴스 멤버
   	int field1;
    void method1(){};
    //정적 멤버
    static int field2;
    static void method2();
    //정적 메소드
    static void method2(){
        //B var1 = new B(); 안됨
        C var2 = new C();
    }
    //인스턴스 멤버 클래스
    class B{
    	field1=10;
    	method1();
    	field2=10;
		method2();	// 모든 필드와 메소드에 접근할 수 있다.
    }
    //정적 멤버 클래스
    static class C{    	
        //field1=10;
    	//method1();     인스턴스 필드와 메소드에는 접근할 수 없다.
    	field2=10;
		method2();}
}
9.3.3 로컬 클래스에서 사용 제한
- 로컬 클래스 내부에서는 바깥 클래스의 필드나 메소드를 제한 없이 사용할 수 있다.
- 그러나 메소드의 매개 변수나 로컬 변수를 로컬 클래스에서 사용할 때, 로컬 클래스의 객체는 메소드 실행이 끝나도 힙 메모리에 존재해서 사용될 수 있는데, 
  이 때 매개 변수나 로컬 변수는 메소드 실행이 끝나 스택 메모리에서 사라지므로 로컬 객체에서 사용될 경우 문제가 발생할 수 있다.
- 자바는 이를 위하여 로컬 클래서에서 사용하는 로컬 변수의 값을 로컬 클래스 내부에 복사에 두고 사용하며, 값이 변경되었을 때를 대비하여 이를 모두 final로 선언한다. 
  결국 로컬 클래스에서 사용 가능한 것은 final로 선언된 매개변수와 로컬 변수뿐이라는 것이다.
- java8부터 final 키워드를 포함하면 로컬 클래스의 메소드 내부 지역변수로 복사되고, 포함하지 않으면 로컬 클래스의 필드로 복사된다.
9.3.4 중첩 클래스에서 바깥 클래스 참조 얻기
- 중첩 클래스에서 this키워드를 사용하면 중첩 클래스 자신의 객체를 참조하게 된다.
- 중첩 클래스 내부에서 바깥 클래스 참조를 얻으려면 다음의 방법을 사용한다.
바깥클래스.this.필드
바깥클래스.this.메소드();
9.4 중첩 인터페이스
- 클래스의 멤버로 선언된 인터페이스를 말한다.
- 인터페이스를 클래스 내부에 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다. 
  특히 UI 프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.
- 예제 : Button을 클릭했을 때 이벤트를 처리하는 객체를 받고 싶을 때 Button 내부에 선언된 중첩 인터페이스를 구현한 객체만 받아야 한다면, 
  다음과 같이 클래스를 선언할 수 있다.
publi class Button{
    onClickListener listner; // 인터페이스 필드
    void setOnClickListener(OnClickListener listener){
        this.listener = listener;
    }		//setter 메소드, 매개 변수의 다형성 보여줌
    void touch(){
        listener.onClick();
    }		//구현 객체의 onClick() 메소드 호출
    interface OnClickListener{
        void onClick();		//중첩 인터페이스
    }
}
//구현 클래스
public class CallListener implements Button.OnClickListener{
    @Override
    public void onClick(){
        System.out.println("전화를 겁니다");
    }
}
//버튼 이벤트 처리
public class ButtonEx{
    public static void main(String[] args){
        Button btn = new Button();
        btn.setOnClickListener(new CallListener());
        btn.touch();
    }
}
9.5 익명 객체
- 익명 객체는 이름이 없는 객체를 말한다.
- 익명 객체는 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있다.
- 익명 객체는 필드의 초기값이나 로컬 변수의 초기값, 매개 변수의 매개값으로 주로 대입된다.
- UI 이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로 익명 객체가 많이 활용된다.
9.5.1 익명 자식 객체 생성
- 부모 타입으로 필드나 변수를 선언하고, 자식 객체를 초기값으로 대입할 경우, 다음과 같이 사용하게 된다.
class Child extends Parent {}
class A {
    Parent field = new Child(); // 필드에 자식 객체를 대입
    void method(){
        Parent localVar = new Child(); // 로컬 변수에 자식 객체를 대입
    }
}
- 그러나 자식 클래스가 재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용할 경우라면 익명 자식 객체를 생성해서 초기값으로 대입하는 것이 좋은 방법이다.
부모클래스[필드:변수] = new 부모클래스(매개값, ...){
    	 //필드
    	 //메소드
}; //세미콜론 붙여야함
- 중괄호 내부에는 필드나 메소드를 선언하거나 부모 클래스의 메소드를 재정의하는 내용이 들어가는데, 일반 클래스와는 달리 생성자를 선언할 수 없다.
- 필드를 선언할 때 사용하는 법
class A {
   	  Parent field = new Parent() {
        	 int childField;
       	 	 void childMethod(){}
        	 @Override //parent 메소드 재정의
      	 	  void parentMethod(){}
    	  };
}
- 메소드 로컬 변수의 초기값으로 들어가는 모습
class A {
   	  void method(){
       		 Parent localVar = new Parent(){
        	   int childField;
       	   	   void childMethod(){}
          	   @Override
         	   void parentMethod(){}
       		  };
   	  }
}
- 메소드의 매개 변수가 부모 타입일 경우 익명 자식 객체를 생성해서 매개값으로 대입할 수 있다.
class A {
   void method1(Parent parent){}    
  	   void method2(){
       		  method1(	//method1을 호출하면서, 매개값으로 익명 객체를 사용했다.
        		new Parent(){
             		   	 int childField;
               			 void childMethod(){}
             			 @Override
               			 void parentMethod(){}
           		  };
        	 )
   	  }
}
- 익명 자식 객체에 새롭게 정의된 필드와 메소드는 익명 자식 객체 내부에서만 사용되고, 외부에서는 필드와 메소드에 접근할 수 없다. 
  왜냐하면 익명 자식 객체는 부모 타입 변수에 대입되므로 부모 타입에 선언된 것만 사용할 수 있기 때문이다.
- 그러나 재정의 한 것은 사용할 수 있다.
class A {
    Parent field = new Parent(){
        int childField;
        void childMethod(){}
        @Override
        void parentMethod(){
            childField =3;
            childMethod();
        }
    };
    
    void method(){
        //field.childField =3;
        //field.childMethod(); //부모 타입 내용이므로 사용할 수 없다.
        field.parentMethod();// 재정의했기 때문에 사용가능
        
    }
}
- 결론적으로 부모 타입의 필드와 메소드의 로컬 변수, 메소드의 매개 변수로 들어가는 것을 볼 수 있다.
9.5.2 익명 구현 객체 생성
- 구현 -> 인터페이스 관련!
- 인터페이스 타입으로 필드나 변수를 선언하고, 구현 객체를 초기값으로 대입하는 경우는 다음과 같다,
class TV implements RemoteControl{}
class A{
    RemoteControl field = new TV();// 인터페이스에 필요한 구현 객체를 생성하여 대입
    void method(){
        RemoteControl localVar = new TV(); // 로컬 변수에 구현 객체를 대입
    }
}
- 그러나 구현 클래스가 재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용하는 경우라면 익명 구현 객체를 초기값으로 대입하는 것이 좋다.
인터페이스 [필드:변수] = new 인터페이스() {
    //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
    //필드
    //메소드
}; //중괄호에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다.
- 추가적인 필드와 메소드는 선언은 가능하나 실체 메소드에서만 사용이 가능하고 외부에서는 사용하지 못한다.
- 필드로 익명 구현 객체 생성한 모습
class A{
    RemoteControl field = new RemoteControl(){
        @Override
        void turnOn{} //추상메소드에 대한 실체 메소드
    }
}
- 메소드 내에 로컬 변수를 선언할 때 초기값으로 익명 구현 객체를 생성해서 대입하는 모습
void method(){
    RemoteControl localVar = new RemoteControl(){
        @Override
        void turnOn(){} //추상 메소드에 대한 실체 메소드
    };
}
- 매개 값으로 사용하는 모습
class A {
    void method1(RemoteControl rc){} 
    
    void method2(){
        method1(
            new RemoteControl(){
                @Override
                void turnOn(){}
            }
        ); //메소드 안에 익명 구현 객체가 선언되면 해당 메소드의 )에 ;를 쓴다.
    }
}
- 예제 : UI에서 사용되는 버튼의 클릭 이벤트 처리
//UI 클래스
public class Button{
    onClickListener listener; //인터페이스 타입 필드
    
    void setOnClickListener(OnClickListener listener){
        this.listener = listener;		//매개 변수의 다형성
    }
    
    void touch(){ // 구현 객체의 onclick 메소드 호출
        listener.onClick();
    }
    
    interface OnClickListener { //중첩 인터페이스
        void onClick();
    }
}
public class Window {
    Button button1 = new Button();
    Button button2 = new Button();
    
    //필드 초기값으로 대입
    Button.OnClickListener listener = new Button.OnClickListener() {
        @Override
        public void onClick(){
            System.out.println("전화를 겁니다.");
        }
    };
    
    Window(){
        button1.setOnClickListener(lisetener); //매개값으로 위 필드 대입
        button2.setOnClickListener(new Button.OnClickListener() {//매개값으로 익명 구현 객체 대입
            @Override
            public void onClick(){
                System.out.println("메시지를 보냅니다.");
            }
        };
    }
}
//실행 클래스
public class Main{
    public static void main(String[]args){
        Window w = new Window();
        w.button1.touch();
        w.button2.touch();
    }
}
9.5.3 익명 객체의 로컬 변수 사용
- 로컬 클래스와 거의 같은 내용을 담고 있다.
- 메소드의 매개 변수나 로컬 변수를 익명 객체에서 사용할 때, 메소드가 끝나면 스택 메모리에서 매개변수와 로컬 변수가 사라지므로 익명 객체에서 사용할 수 없게 된다. 
  그래서 자바는 매개 변수와 로컬 변수를 익명 클래스에 final로 복사한다.
- 익명 객체가 로컬 변수로 있는 메소드 {} 안은 익명 객체 로컬 변수 {} 안이 아니더라도 final로 적용이 된다.
public interface Calculatable{
    public int sum();
}
public class Anonymous{
    private int field;
    public void method(final int arg1, int arg2){
        final int var1=0;
        int var2 =0;
        field =10; //바깥 클래스 내용은 제한 없이 사용
        //arg1 =10;
        //arg2 =10;
        //var1=10;
        //var2=10; final이므로 수정 불가
        Calculatable calc = new Calculatable(){
            @Override
            publi cint sum(){
                int result = field + arg1 +arg2 + var1 + var2;
                return result;
            }
        };
        System.out.println(calc.sum);
    }
}
public class AnonymousEx{
    public static void main(String[]args){
        Anonymous anony = new Anonymous();
        anony.method(0,0);
    }
} //실행 결과 : 10


예외 처리
10.1 예외와 예외 클래스
- 컴퓨터 하드웨어의 오동작 도는 고장으로 인해 응용프로그램 실행 오류가 발생하는 것을 자바에서는 error라고 한다. 개발자는 이런 에러에 대처할 방법이 전혀 없다.
- 자바에서는 에러 이외에 예외( exception)이라고 부르는 오류가 있다. 이는 사용자의 잘못된 조작 도는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류를 말한다. 
  예외 발생 시 프로그램은 곧바로 종료된다는 점에서 에러와 동일하다. 
  그러나 예외는 예외처리를 통해 프로그램을 종료하지 않고 정상 실행 상태가 유지되도록 할 수 있다.
예외의 종류
- 일반 예외(Exception)
컴파일러 체크 예외라고도 하며, 자바 소스를 컴파일하는 과정에서 예외 처리 코드가 필요한지 검사한다. 예외 처리 코드가 없으면 컴파일 오류가 발생한다.
- 실행 예외(RuntimeException)
컴파일하는 과정에서 예외 처리 코드를 검사하지 않는 예외를 말한다.
- JVM은 프로그램을 실행하는 도중에 예외가 발생하면 해당 예외 클래스로 객체를 생성한다. 그리고 예외 처리 코드에서 예외 객체를 이용하도록 한다.
- 모든 예외 클래스는 java.lang.Exception을 상속 받는다.
- 일반 예외는 Exception은 상속 받지만 RuntimeException을 상속 받지 않고, 실행 예외는 RuntimeException을 상속 받음으로 둘 다 받게 된다.
10.2 실행 예외
- 실행 예외는 자바 컴파일러가 체크를 하지 않기 때문에 오로지 개발자의 경험에 의해서 예외 처리 코드를 삽입해야 한다.
10.2.1 NullPointException
- 객체 참조가 없는 상태, 즉 null값을 갖는 참조 변수로 객체 접근 연산자인 도트(.)를 사용했을 때 발생한다.
public class NullPointExceptionEx{
	public static void main(String[]args){
		String data = null;
		System.out.println(data.toString()); //toString 함수가 참조할 객체가 없으므로 예외 발생
	}
}
10.2.2 ArrayIndexOutOfBoundsException
- 배열에서 인덱스 범위를 초과하여 사용할 경우 발생한다.
public class ArrayIndexOutOfBoundsException{
	public static void main(String[]args){
		String data1 = args[0]; //args[0], args[1]의 실행 매개값 주기 않았기 때문에 예외 발생
		String data2 = args[1];
		//if(args.lenghth ==2) 으로 먼저 조건을 걸어 예외를 처리해야 함.
		System.out.println("args[0]:" + data1);
		System.out.println("args[1]:" + data2);
	}
}
10.2.3 NumberFormatException
- 문자열로 되어 있는 데이터를 숫자로 변경할 때, 해당 데이터에 숫자로 변환될 수 없는 문자가 포함되어 있으면 발생한다.
public class NumberFormatException{
	public static void main(String[]args){
		String data1 = "100";
		String data2 = "a100";
		int value1= Integer.parseInt(data1);
		int value2= Integer.parseInt(data2); //숫자 변환 불가 문자 포함되어 있어 예외 발생
		System.out.println(data1 + data2);
	}
}
10.2.4 ClassCastException
- 타입 변환될 수 없는 클래스나 인터페이스를 강제로 타입 변환하고자 할 때 발생한다.
Animal animal = new Dog();
// Cat cat = (Cat) animal; 참조한 자식 객체가 아니므로 예외 발생
RemoteControl rc = new TV;
//Audio audio = (Audio) rc; 대입한 구현 클래스가 아니므로 예외 발생
- 해당 예외를 발생시키지 않기 위해서 타입 변환 전에 타입 변환이 가능한지 instanceof 연산자로 확인하는 것이 좋다. instanceof
Animal animal = new Cat();
if(animal instanceof Cat){
	Cat cat = (Cat) animal;
} else if(animal instanceof Dog){
	Dog dog = (Dog) animal;
}
10.3 예외 처리 코드
- 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라고 한다.
- 예외 처리 코드는 try-catch-finally 블록을 사용할 수 있다.
- try-catch-finally 블록은 생성자 내부와 메소드 내부에서 작성되어 일반 예외와 실행 예외가 발생할 수 있도록 예외 처리를 해준다.
public class Try{
	public static void main(String[]args){
		String data1 = null;
		try{
			data1 = args[0]; //예외 발생시 예외 객체를 catch의 매개값으로 보낸다.
		} catch(ArrayIndexOutOfBoudsException e) {
				System.out.println("실행 매개값의 수가 부족합니다");
				System.out.println("실행방법");
			  System.out.println("java Try num1");
		} finally { //예외 발생 여부와 상관 없이 실행, try나 catch블록에서 return문을 사용하더라도 항상 실행됨
				System.out.println("다시 실행하세요");
		}
	}
}
10.4 예외 종류에 따른 처리 코드
10.4.1 다중 catch
- try 블록 내부에서 다양한 종류의 예외가 발생할 수 있다. 이 때 발생하는 예외별로 예외 처리 코드를 다양하게 하기 위해 다중 catch블록을 사용할 수 있다.
- catch 블록이 여러 개 있더라도 try 블록에서 하나의 예외가 발생하면 즉시 해당의 catch 블록으로 이동하기 때문에 실행되는 catch 블록은 단 하나이다.
10.4.2 catch 순서
- 다중 catch 블록을 작성할 때는 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치하도록 해야 한다.
  try블록에서 예외 발생 시 catch 블록을 위부터 차례 대로 검색하기 때문에 하위 예외가 상속한 상위 예외가 실행될 수 있기 때문이다.
public class Catch{
	public static void main(String[]args){
		try{
			String data1 = args[0];
			System.out.println(data1);
		} catch(ArrayIndexOfBoundsException e){ //하위 예외 클래스가 먼저 있음
				System.out.println("실행 매개값의 수가 부족합니다.");
			} catch(Exception e) { //상위 예외 클래스 일수록 아래에 있어야 함
				System.out.println("실행에 문제가 있습니다.");
			} finally {
				System.out.println("다시 실행하세요");
			}
	}
}
10.4.3 멀티 catch
- 자바7부터 하나의 catch 블록에서 여러 개의 예외를 처리할 수 있도록 멀티(multi) catch 기능을 추가했다.
try{
  //실행 내용
} catch (ArrayIndexOfBoundsException e || NumberFormatException e) {// ||를 통해 멀티 가능
	System.out.println("실행 매개값의 수가 부족하거나 숫자로 변환할 수 없습니다.");
} catch (Exception e) {
	System.out.println("알 수 없는 예외 발생");
}
10.5 자동 리소스 닫기
- try-with-resources를 사용하면 예외 발생 여부와 상관없이 사용했던 리소스 객체의 close() 메소드를 호출해서 안전하게 리소스를 닫아준다.
(리소스 : 지금은 데이터를 읽고 쓰는 객체 정도로 생각)
try(FileInputStream fis = new FileInputStream("file.txt");{
	...
} catch(IOException e){
	...
}
- try 블록이 정상적으로 실행을 완료했거나 도중에 예외가 발생하게 되면 자동으로 FileInputStream의 close()메소드가 호출된다.
  try{}에서 예외가 발생하면 우선 close()로 리소스를 닫고 catch 블록을 실행한다.
//복수 개의 리소스를 사용해야 한다면 다음과 같이 작성할 수 있다.
try(
		FileInputStream fis = new FileInputStream("file1.txt");
		FileOutputStream fos = new FileOutputStream("file2.txt")
) {
	...
} catch(IOException e){
	...
}
- try-with-resources를 사용하기 위해서 리소스 객체는 java.lang.AutoCloseable 인터페이스를 구현하고 있어야 한다.
  AutoCloseable에는 close() 메소드가 정의되어 있는데 try-with-resources는 이 메소드를 자동 호출한다.
//AutoCloseable 구현 클래스
public class FileInputStream implements AutoCloseable {
	private String file;
	public FileInputStream(String file){
		this.file = file;
	}
	public void read(){
		System.out.println(file +"을 읽습니다.");
	}
	@Override
	public void close() throws Exception {
		System.out.println(file +"을 닫습니다.");
	}
}
public class Try {
	public static void main(String[]args){
		try (FileInputStream fis =  new FileInputStream("file.txt")){
			fis.read();
			throw new Exception();//강제 예외 발생 ->  close() 호출됨
		} catch(Exception e){
			System.out.println("예외 처리 코드가 실행되었습니다.");
		}
	}
}
10.6 예외 떠넘기기
- 메소드 내부에서 예외가 발생할 수 있는 코드를 작성할 때 try-catch 블록으로 예외를 처리하는 것이 기본이지만. 
  경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다. 이 때 throws를 사용한다.
리턴타입 메소드명(매개 변수, ...) throws 예외클래스1, 예외클래스2, ...{ //Exception만 적을 수도 있다
}
public void method1(){
		try{
			method2(); //호출한 곳
		} catch(ClassNotFoundException e) {
			System.out.println("클래스가 존재하지 않습니다");
		}
	}
	public void method2() throws ClassNotFoundException {//호출한 곳에서 예외처리하게 됨
		Class clazz = Class.forName("java.lang.String2");
	}
- 자바 API 도큐먼트에서 클래스 생성자와 메소드 선언부에 throws 키워드가 있는 것의 생성자와 메소드를 사용하고 싶다면, 
  반드시 try-catch 블록으로 예외 처리를 하거나, throws를 다시 사용해서 예외를 호출한 곳으로 떠넘겨야 한다. 그렇지 않으면 컴파일 오류가 발생한다.
- 예제 : forName () 메소드 try-catch 블록 처리
public class Ex {
	public static void main(String[]args){
		try{
			findClass(); //호출한 곳
		} catch(ClassNotFoundException e) {
			System.out.println("클래스가 존재하지 않습니다");
		}
	}
	public static void findClass() throws ClassNotFoundException {//호출한 곳에서 예외처리하게 됨
		Class clazz = Class.forName("java.lang.String2");
	}
}
- main 메소드에서도 throws키워드를 통해 예외처리 떠넘겨서 JVM이 최종적으로 예외처리를 하게 할 수 있다. 이는 콘솔에 출력된다. 권장되는 방법은 아니다.
10.7 사용자 정의 예외와 예외 발생
- 자바 표준 API에서 제공하는 예외 클래스 외에 개발자가 직접 정의하여 예외를 만들 수 있다. 이를 사용자 정의 예외 라고 하며, 
  애플리케이션 서비스와 관련된 예외이기도 하기에 애플리케이션 예외(Application Exception) 라고도 한다.
10.7.1 사용자 정의 예외 클래스 선언
- 일반 예외로 선언할 경우 Exception을 상속하고, 실행 예외로 선언할 경우 RuntimeException을 상속한다.
- 이름은 Exception으로 끝나는 것이 좋다.
- 필드, 생성자, 메소드 선언들을 포함할 수 있지만 대부분 생성자 선언만을 포함한다.
- 생성자는 일반적으로 두 개를 선언한다.
- 매개 변수가 없는 기본 생성자
- 예외 발생 원인(예외 메시지)을 전달하기 위해 String 타입의 매개 변수를 갖는 생성자
- 상위 클래스의 생성자를 호출하여 예외 메시지를 넘겨준다. 예외메시지는 catch() 블록의 예외 처리 코드에서 이용하기 위함이다.
//사용자 정의 예외 클래스
public class BalanceInsufficientException extends Exception {
	public BalanceInsufficientException(){}
	public BalanceInsufficientException(String message){
		super(message);
	}
}
- Exception을 상속하므로 컴파일러에 의해 체크 되는 예외가 되므로 소스 작성 시 try-catch 블록으로 예외 처리가 필요하다.
10.7.2 예외 발생시키기
- 다음과 같이 예외를 발생 시킬 수 있다.
throw new XXXException();
throw new XXXException("메시지");//catch블록에서 예외 메시지가 필요하다면 이 생성자를 사용
- 예외 발생 코드를 가지고 있는 메소드는 내부에서 try-catch 블록으로 예외를 처리할 수 있지만, 대부분은 자신을 호출한 곳에서 예외를 처리하도록 throws 키워드로 예외를 떠넘긴다.
public void method() throws XXXException{
	throw new XXXException("메시지");
}
10.8 예외 정보 얻기
- try 블록에서 예외가 발생되면 예외 객체는 catch 블록의 매개 변수에서 참조하게 되므로 매개 변수를 이용하면 예외 객체의 정보를 알 수 있다. 
  모든 객체는 Exception을 상속하므로 Exception이 가진 모든 메소드들을 모든 예외 객체에서 호출할 수 있다.
- 예외를 발생시켰을 때 String 타입의 메시지를 갖는 생성자를 이용했다면, 메시지는 자동적으로 예외 객체 내부에 저장된다. ex) throw new XException("예외 메시지");
- 예외 메시지의 내용에는 왜 예외가 발생했는지에 대한 간단한 설명이 포함되며, 좀 더 상세한 원인을 알기 위해 예외 코드를 포함하기도 한다.
try{
	// 실행내용 및 예외 객체 생성
} catch (예외 클래스 e){
	//예외가 가지고 있는 메시지 얻기
	String message = e.getMessage();
	//예외의 발생 경로를 추적
	e.printStackTrace(); //콘솔에 추적 내용이 출력됨
}
